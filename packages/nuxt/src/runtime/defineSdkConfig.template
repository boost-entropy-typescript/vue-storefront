import { buildModule, middlewareModule } from "@vue-storefront/sdk";
import { composeMiddlewareUrl, useNuxtApp, useRequestHeaders, getDefaultMethodsRequestConfig } from "#imports";
import { SdkModuleOptions } from "./alokaiModule";

type InjectedContext = {
  buildModule: typeof buildModule;
  middlewareModule: typeof middlewareModule;
  /**
   * @deprecated
   * Use `config.middlewareUrl` instead.
   */
  middlewareUrl: string;
  /**
   * @deprecated
   * Use `getRequestHeaders` instead.
   */
  getCookieHeader: () => Record<string, string>;
  getRequestHeaders: () => Record<string, string>;
  /**
   * @deprecated
   * Use `config.defaults` instead.
   */
  defaults: ReturnType<typeof getDefaultMethodsRequestConfig>;
  config: {
    middlewareUrl: string;
    defaultMethodsRequestConfig: ReturnType<typeof getDefaultMethodsRequestConfig>;
    cdnCacheBustingId: string;
  };
};

type Config<TConfig> = (context: InjectedContext) => TConfig;

const moduleConfig: SdkModuleOptions = <%= options.moduleConfig %>;

/**
  * Define SDK config function
  *
  * @param config - Function that returns SDK config
  *
  * @example
  * ```ts
  * import {
  *   contentfulModule,
  *   ContentfulModuleType,
  * } from "@vsf-enterprise/contentful-sdk";
  * import type { UnifiedApiEndpoints } from "../storefront-middleware/types";
  *
  * export default defineSdkConfig(
  *   ({ buildModule, middlewareModule, config, getCookieHeader }) => ({
  *     unified: buildModule(middlewareModule<UnifiedApiEndpoints>, {
  *       apiUrl: config.middlewareUrl + "/commerce",
  *       defaultRequestConfig: { headers: { ...getCookieHeader() } },
  *       cdnCacheBustingId: config.cdnCacheBustingId,
  *       methodsRequestConfig: config.defaultMethodsRequestConfig.unifiedCommerce.middlewareModule,
  *     }),
  *     contentful: buildModule(contentfulModule, {
  *       apiUrl: config.middlewareUrl + "/cntf",
  *     }),
  *   }),
  * );
  * ```
  */
export function defineSdkConfig<TConfig>(config: Config<TConfig>) {
  return () => {
    const nuxtApp = useNuxtApp()
    const runtimeConfig = useRuntimeConfig();

    const requestHeaders = useRequestHeaders(["x-forwarded-host", "host"]);
    const resolvedOptions = resolveOptions(runtimeConfig.public.alokai);

    const middlewareUrl = composeMiddlewareUrl({
      options: resolvedOptions,
      headers: requestHeaders,
    });

    const getCookieHeader = () => useRequestHeaders(["cookie"]);
    const getRequestHeaders = () => useRequestHeaders();

    return config({
      buildModule,
      middlewareModule,
      getCookieHeader,
      getRequestHeaders,
      defaults: getDefaultMethodsRequestConfig(),
      middlewareUrl,
      config: {
        defaultMethodsRequestConfig: getDefaultMethodsRequestConfig(),
        middlewareUrl,
        cdnCacheBustingId: runtimeConfig.public.alokai.middleware.cdnCacheBustingId,
      }
    });
  }
}

function resolveOptions(
  input: SdkModuleOptions,
  options: Partial<ResolveSdkOptionsConfig> = {}
): SdkModuleOptions {
  if (input?.multistore?.enabled) {
    return {
      middleware: {
        // This is a dummy URL, the localhost domain will be replaced by the actual domain in the browser
        // in composeMiddlewareUrl function. The server-side rendering will use ssrApiUrl.
        apiUrl: `https://localhost/${options?.customSuffix ?? "api"}`,
        cdnCacheBustingId: input.middleware?.cdnCacheBustingId,
        ssrApiUrl: input.middleware?.ssrApiUrl ?? input.middleware.apiUrl,
      },
      multistore: {
        enabled: true,
      },
    };
  }

  return input;
}

type ResolveSdkOptionsConfig = {
  customSuffix: string;
}
